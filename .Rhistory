use_r("weighted_loss")
use_r("detect_outliers")
use_r("range_check")
use_test("mean_imputation")
use_test("multiple_imputation")
use_test("z_score_outliers")
use_test("iqr_outliers")
use_test("standardize")
use_test("normalize")
use_test("one_hot_encode")
use_test("ordinal_encode")
use_test("identify_duplicates")
use_test("remove_duplicates")
use_test("retain_duplicates")
use_test("calculate_vif")
use_test("perform_pca")
use_test("weighted_loss")
use_test("detect_outliers")
use_test("range_check")
library(roxygen2)
roxygenize()
file.remove("NAMESPACE")
library(devtools)
devtools::document()
library(roxygen2)
roxygenize()
file.remove("NAMESPACE")
library(devtools)
devtools::document()
# Run all tests in the package
if (!requireNamespace("testthat", quietly = TRUE)) {
install.packages("testthat")
}
devtools::test()
# Run all tests in the package
if (!requireNamespace("testthat", quietly = TRUE)) {
install.packages("testthat")
}
devtools::test()
library(usethis)
use_r("mean_imputation")
use_r("multiple_imputation")
use_r("z_score_outliers")
use_r("iqr_outliers")
use_r("standardize")
use_r("normalize")
use_r("one_hot_encode")
use_r("ordinal_encode")
use_r("identify_duplicates")
use_r("remove_duplicates")
use_r("retain_duplicates")
use_r("calculate_vif")
use_r("perform_pca")
use_r("weighted_loss")
use_r("detect_outliers")
use_r("range_check")
use_test("mean_imputation")
use_test("multiple_imputation")
use_test("z_score_outliers")
use_test("iqr_outliers")
use_test("standardize")
use_test("normalize")
use_test("one_hot_encode")
use_test("ordinal_encode")
use_test("identify_duplicates")
use_test("remove_duplicates")
use_test("retain_duplicates")
use_test("calculate_vif")
use_test("perform_pca")
use_test("weighted_loss")
use_test("detect_outliers")
use_test("range_check")
library(roxygen2)
roxygenize()
file.remove("NAMESPACE")
library(devtools)
devtools::document()
# Run all tests in the package
if (!requireNamespace("testthat", quietly = TRUE)) {
install.packages("testthat")
}
devtools::test()
# Run all tests in the package
if (!requireNamespace("testthat", quietly = TRUE)) {
install.packages("testthat")
}
devtools::test()
library(usethis)
use_r("mean_imputation")
use_r("iqr_outliers")
use_r("standardize")
use_r("normalize")
use_r("one_hot_encode")
use_r("ordinal_encode")
use_r("identify_duplicates")
use_r("remove_duplicates")
use_r("retain_duplicates")
use_r("calculate_vif")
use_r("perform_pca")
use_r("weighted_loss")
use_r("detect_outliers")
use_r("range_check")
use_test("mean_imputation")
use_test("iqr_outliers")
use_test("standardize")
use_test("normalize")
use_test("one_hot_encode")
use_test("ordinal_encode")
use_test("identify_duplicates")
use_test("remove_duplicates")
use_test("retain_duplicates")
use_test("calculate_vif")
use_test("perform_pca")
use_test("weighted_loss")
use_test("detect_outliers")
use_test("range_check")
library(roxygen2)
roxygenize()
file.remove("NAMESPACE")
library(devtools)
devtools::document()
library(roxygen2)
roxygenize()
# Run all tests in the package
if (!requireNamespace("testthat", quietly = TRUE)) {
install.packages("testthat")
}
devtools::test()
# Run all tests in the package
if (!requireNamespace("testthat", quietly = TRUE)) {
install.packages("testthat")
}
devtools::test()
devtools::check()
devtools::run_examples()
devtools::check()
library(usethis)
use_r("mean_imputation")
use_r("iqr_outliers")
use_r("standardize")
use_r("normalize")
use_r("one_hot_encode")
use_r("ordinal_encode")
use_r("identify_duplicates")
use_r("remove_duplicates")
use_r("retain_duplicates")
use_r("calculate_vif")
use_r("perform_pca")
use_r("weighted_loss")
use_r("detect_outliers")
use_r("range_check")
use_test("mean_imputation")
use_test("iqr_outliers")
use_test("standardize")
use_test("normalize")
use_test("one_hot_encode")
use_test("ordinal_encode")
use_test("identify_duplicates")
use_test("remove_duplicates")
use_test("retain_duplicates")
use_test("calculate_vif")
use_test("perform_pca")
use_test("weighted_loss")
use_test("detect_outliers")
use_test("range_check")
library(roxygen2)
roxygenize()
file.remove("NAMESPACE")
library(devtools)
devtools::document()
# Run all tests in the package
if (!requireNamespace("testthat", quietly = TRUE)) {
install.packages("testthat")
}
devtools::test()
devtools::check()
library(usethis)
use_r("mean_imputation")
use_r("iqr_outliers")
use_r("standardize")
use_r("normalize")
use_r("one_hot_encode")
use_r("ordinal_encode")
use_r("identify_duplicates")
use_r("remove_duplicates")
use_r("retain_duplicates")
use_r("calculate_vif")
use_r("perform_pca")
use_r("weighted_loss")
use_r("detect_outliers")
use_r("range_check")
use_test("mean_imputation")
use_test("iqr_outliers")
use_test("standardize")
use_test("normalize")
use_test("one_hot_encode")
use_test("ordinal_encode")
use_test("identify_duplicates")
use_test("remove_duplicates")
use_test("retain_duplicates")
use_test("calculate_vif")
use_test("perform_pca")
use_test("weighted_loss")
use_test("detect_outliers")
use_test("range_check")
library(roxygen2)
roxygenize()
file.remove("NAMESPACE")
library(devtools)
devtools::document()
library(roxygen2)
roxygenize()
file.remove("NAMESPACE")
library(devtools)
devtools::document()
# Run all tests in the package
if (!requireNamespace("testthat", quietly = TRUE)) {
install.packages("testthat")
}
devtools::test()
# Run all tests in the package
if (!requireNamespace("testthat", quietly = TRUE)) {
install.packages("testthat")
}
devtools::test()
devtools::check()
devtools::check(args = "--as-cran")
devtools::check(args = "--as-cran")
devtools::check(args = "--as-cran")
devtools::check(args = "--as-cran")
library(roxygen2)
roxygenize()
file.remove("NAMESPACE")
library(devtools)
devtools::document()
# Run all tests in the package
if (!requireNamespace("testthat", quietly = TRUE)) {
install.packages("testthat")
}
devtools::test()
# Run all tests in the package
if (!requireNamespace("testthat", quietly = TRUE)) {
install.packages("testthat")
}
devtools::test()
devtools::check()
devtools::check(args = "--as-cran")
library(roxygen2)
roxygenize()
file.remove("NAMESPACE")
library(devtools)
devtools::document()
# Run all tests in the package
if (!requireNamespace("testthat", quietly = TRUE)) {
install.packages("testthat")
}
devtools::test()
devtools::check()
library(roxygen2)
roxygenize()
file.remove("NAMESPACE")
library(devtools)
devtools::document()
# Run all tests in the package
if (!requireNamespace("testthat", quietly = TRUE)) {
install.packages("testthat")
}
devtools::test()
devtools::check()
install.packages("VGAM")
library(VGAM)
library(roxygen2)
roxygenize()
file.remove("NAMESPACE")
library(devtools)
devtools::document()
library(usethis)
use_r("mean_imputation")
use_r("iqr_outliers")
use_r("standardize")
use_r("normalize")
use_r("one_hot_encode")
use_r("ordinal_encode")
use_r("identify_duplicates")
use_r("remove_duplicates")
use_r("retain_duplicates")
use_r("calculate_vif")
use_r("perform_pca")
use_r("weighted_loss")
use_r("detect_outliers")
use_r("range_check")
use_test("mean_imputation")
use_test("iqr_outliers")
use_test("standardize")
use_test("normalize")
use_test("one_hot_encode")
use_test("ordinal_encode")
use_test("identify_duplicates")
use_test("remove_duplicates")
use_test("retain_duplicates")
use_test("calculate_vif")
use_test("perform_pca")
use_test("weighted_loss")
use_test("detect_outliers")
use_test("range_check")
library(roxygen2)
roxygenize()
file.remove("NAMESPACE")
library(devtools)
devtools::document()
library(roxygen2)
roxygenize()
file.remove("NAMESPACE")
library(devtools)
devtools::document()
# Run all tests in the package
if (!requireNamespace("testthat", quietly = TRUE)) {
install.packages("testthat")
}
devtools::test()
devtools::check()
library(roxygen2)
roxygenize()
file.remove("NAMESPACE")
library(devtools)
devtools::document()
# Run all tests in the package
if (!requireNamespace("testthat", quietly = TRUE)) {
install.packages("testthat")
}
devtools::test()
weighted_loss(c(1, 0, 1), c(0.9, 0.2, 0.7), c(0.3, 0.7))
standardize(c(10, 20, 30, 40, 50))
retain_duplicates(data.frame(a = c(1, 2, 2), b = c(3, 4, 4)))
remove_duplicates(data.frame(a = c(1, 2, 2), b = c(3, 4, 4)))
range_check(c(5, 10, 20, 50), min_val = 10, max_val = 30)
result <- perform_pca(mtcars[c("disp", "hp", "wt")])
#' print(result$principal_components)
#' print(result$explained_variance) print(result$loadings)
result <- perform_pca(mtcars[c("disp", "hp", "wt")])
print(result$principal_components)
print(result$explained_variance)
print(result$loadings)
ordinal_encode(data.frame(category = c("Low", "Medium", "High")), "category")
one_hot_encode(data.frame(category = c("A", "B", "A", "C")), "category")
normalize(c(10, 20, 30, 40, 50))
normalize(c(10, 20, 30, 40, 50))
normalize(c(10, 20, NA, 30))
data <- data.frame(x = c(1, 2, NA, 4, 5))
mean_imputation(data, "x")
iqr_outliers(c(10, 12, 15, 100, 13))
identify_duplicates(data.frame(a = c(1, 2, 2), b = c(3, 4, 4)))
detect_outliers(c(10, 12, 15, 100, 13), threshold = 2
detect_outliers(c(10, 12, 15, 100, 13), threshold = 2)
detect_outliers(c(10, 12, 15, 100, 13), threshold = 2)
detect_outliers(c(10, 12, 15, 100, 13), threshold = 2)
model <- lm(mpg ~ disp + hp + wt, data = mtcars)
calculate_vif(model)
library(usethis)
use_r("mean_imputation")
use_r("iqr_outliers")
use_r("standardize")
use_r("normalize")
use_r("one_hot_encode")
use_r("ordinal_encode")
use_r("identify_duplicates")
use_r("remove_duplicates")
use_r("retain_duplicates")
use_r("calculate_vif")
use_r("perform_pca")
use_r("weighted_loss")
use_r("detect_outliers")
use_r("range_check")
use_test("mean_imputation")
use_test("iqr_outliers")
use_test("standardize")
use_test("normalize")
use_test("one_hot_encode")
use_test("ordinal_encode")
use_test("identify_duplicates")
use_test("remove_duplicates")
use_test("retain_duplicates")
use_test("calculate_vif")
use_test("perform_pca")
use_test("weighted_loss")
use_test("detect_outliers")
use_test("range_check")
library(roxygen2)
roxygenize()
file.remove("NAMESPACE")
library(devtools)
devtools::document()
library(roxygen2)
roxygenize()
file.remove("NAMESPACE")
library(devtools)
devtools::document()
# Run all tests in the package
if (!requireNamespace("testthat", quietly = TRUE)) {
install.packages("testthat")
}
devtools::test()
devtools::check()
library(roxygen2)
roxygenize()
file.remove("NAMESPACE")
library(devtools)
devtools::document()
# Run all tests in the package
if (!requireNamespace("testthat", quietly = TRUE)) {
install.packages("testthat")
}
devtools::test()
devtools::check()
library(usethis)
use_r("mean_imputation")
use_r("iqr_outliers")
use_r("standardize")
use_r("normalize")
use_r("one_hot_encode")
use_r("ordinal_encode")
use_r("identify_duplicates")
use_r("remove_duplicates")
use_r("retain_duplicates")
use_r("calculate_vif")
use_r("perform_pca")
use_r("weighted_loss")
use_r("detect_outliers")
use_r("range_check")
use_test("mean_imputation")
use_test("iqr_outliers")
use_test("standardize")
use_test("normalize")
use_test("one_hot_encode")
use_test("ordinal_encode")
use_test("identify_duplicates")
use_test("remove_duplicates")
use_test("retain_duplicates")
use_test("calculate_vif")
use_test("perform_pca")
use_test("weighted_loss")
use_test("detect_outliers")
use_test("range_check")
library(roxygen2)
roxygenize()
file.remove("NAMESPACE")
library(devtools)
devtools::document()
# Run all tests in the package
if (!requireNamespace("testthat", quietly = TRUE)) {
install.packages("testthat")
}
devtools::test()
devtools::check()
library(usethis)
use_r("mean_imputation")
use_r("iqr_outliers")
use_r("standardize")
use_r("normalize")
use_r("one_hot_encode")
use_r("ordinal_encode")
use_r("identify_duplicates")
use_r("remove_duplicates")
use_r("retain_duplicates")
use_r("calculate_vif")
use_r("perform_pca")
use_r("weighted_loss")
use_r("detect_outliers")
use_r("range_check")
use_test("mean_imputation")
use_test("iqr_outliers")
use_test("standardize")
use_test("normalize")
use_test("one_hot_encode")
use_test("ordinal_encode")
use_test("identify_duplicates")
use_test("remove_duplicates")
use_test("retain_duplicates")
use_test("calculate_vif")
use_test("perform_pca")
use_test("weighted_loss")
use_test("detect_outliers")
use_test("range_check")
library(roxygen2)
roxygenize()
file.remove("NAMESPACE")
library(devtools)
devtools::document()
library(roxygen2)
roxygenize()
# Run all tests in the package
if (!requireNamespace("testthat", quietly = TRUE)) {
install.packages("testthat")
}
devtools::test()
devtools::check()
devtools::build()
devtools::build()
devtools::install()
datach("package:dataprep", unload=TRUE)
detach("package:dataprep", unload=TRUE)
seatch()
detach("package:dataprep", unload=TRUE)
detach("package:dataprep", unload=TRUE)
detach("dataprep", unload = TRUE)
detach("package:dataprep", unload = TRUE)
library(dataprep)
install.packages("dataprep")
detach("dataprep", unload = TRUE)
search()
devtools::release()
devtools::release()
